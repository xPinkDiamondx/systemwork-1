/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2020-09-28 05:31:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Systemproject;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class kadai002end_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE HTML>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta charset=\"utf-8\">\r\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1, maximum-scale=1, user-scalable=no\">\r\n");
      out.write("        <meta http-equiv=\"Content-Security-Policy\" content=\"default-src * data: gap: content: https://ssl.gstatic.com; style-src * 'unsafe-inline'; script-src * 'unsafe-inline' 'unsafe-eval'\">\r\n");
      out.write("        <script src=\"components/loader.js\"></script>\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"components/loader.css\">\r\n");
      out.write("        <link rel=\"stylesheet\" href=\"css/style.css\">\r\n");
      out.write("\r\n");
      out.write("        <script>\r\n");
      out.write("            function check(x) {\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                if (x == 0){\r\n");
      out.write("                    var message = 'こちらはSCP財団です。\\n 財団の任務は次の３つの要素からなります。\\n 確保(Secure)\\n 収容(Contain)\\n 保護(Protect) \\n詳しく知りたい場合は\"はい\"を選択してください';\r\n");
      out.write("                    var url     = \"http://scp-jp.wikidot.com/\"\r\n");
      out.write("                }else if (x == 1){\r\n");
      out.write("                    var message = \"SCP-040-JP\\n オブジェクトクラス: Safe\\n 特別収容プロトコル: SCP-040-JPは、SCP-040-JPに覆いかぶせるように立てられた収容棟内部に収容されています。\\n収容棟はサイト-8120の管轄に置かれています。\\n収容棟に入った際は、決してSCP-040-JPの内部を視認しない様にしてください。\\nもしSCP-040-JP内部を見る必要がある場合は、必ずカメラを通して確認し、直接肉眼で視認しないようにしてください。直接見る必要がある場合のみ、Dクラス職員に視認させてください。\\n曝露した職員とのコミュニケーションはせず、此方から一方的に指示を与える迄に留めてください  \\n SCP-040-JPの記事に移動しますか？\";\r\n");
      out.write("                    var url     = \"http://scp-jp.wikidot.com/scp-040-jp\"\r\n");
      out.write("                }else if (x == 2){\r\n");
      out.write("                    var message = \"SCP-2026-JPオブジェクトクラス: Euclid\\n特別収容プロトコル: 現在SCP-2026-JPの発生地点は封鎖され一般人の立ち入りが禁じられます。\\n発生したSCP-2026-JPは成長が完了しだい即座に担当職員が収穫し適切な手入れを行った後、サイト-8129の食品保管庫に冷凍保存されます。\\nSCP-2026-JPの記事に移動しますか？\";\r\n");
      out.write("                    var url     = \"http://scp-jp.wikidot.com/scp-2026-jp\"\r\n");
      out.write("                }else if (x == 3){\r\n");
      out.write("                    var message = 'アイテム番号: SCウォオオアアアアアアアア-JP-J\\nオブジェクトクラス: KeterKeterKeterKeterKeterKeter\\n特別収容プロトコル: リビジョンから差し戻してください。\\nscpsaaaaaaaaaaaaaaa-JP-Jの記事に移動しますか？';\r\n");
      out.write("                    var url     = \"http://scp-jp.wikidot.com/scpaaaaaaaaaaaaaaaaaa-jp-j\"\r\n");
      out.write("                }else {\r\n");
      out.write("                alert('エラー！！');\r\n");
      out.write("                }\r\n");
      out.write("            ret = confirm( message );\r\n");
      out.write("            if(ret ==true){\r\n");
      out.write("                location.href = url;\r\n");
      out.write("            }\r\n");
      out.write("            }\r\n");
      out.write("        </script>\r\n");
      out.write("    </head>\r\n");
      out.write("\r\n");
      out.write("    <body>\r\n");
      out.write("\r\n");
      out.write("        <img src=\"img\\SCP.png\" width = \"auto\" height=\"auto\" id = \"scp\" usemap=\"#scpmap\">\r\n");
      out.write("        <map name=\"scpmap\" onclick=\"check(x);\">\r\n");
      out.write("            <area titele=\"SCP\"      onclick = \"check(0)\"  coords=\"0,0,460,154\"        alt=\"SCP\">\r\n");
      out.write("            <area titele=\"ねこ\"     onclick = \"check(1)\"  coords=\"0,167,149,278\"      alt=\"ねこですよろしくおねがいします\">\r\n");
      out.write("            <area titele=\"サグラダ\" onclick = \"check(2)\"  coords=\"155,166,305,278\"    alt=\"サグラダ・ファミリア\">\r\n");
      out.write("            <area titele=\"消えた\"   onclick = \"check(3)\"  shape=\"rect\"    coords=\"313,190,461,278\"    alt=\"うぉあああああああ\">\r\n");
      out.write("        </map>\r\n");
      out.write("\r\n");
      out.write("    </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
